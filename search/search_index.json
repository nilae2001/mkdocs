{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to EJS","text":"<p>EJS (Embedded JavaScript) is a powerful templating engine that integrates JavaScript with HTML to create dynamic web content. It allows developers to embed JavaScript code directly within HTML.</p> <p>EJS is widely adopted in Node.js environments, especially with Express frameworks, thanks to its perfect balance of functionality and straightforward approach.</p> <p>Key advantages of EJS include:</p> <ul> <li>Familiar syntax for JavaScript developers</li> <li>Fast rendering performance</li> <li>Simple integration with Express.js, and other Node.js frameworks</li> <li>Support for partials to promote code reusability</li> <li>Ability to generate HTML dynamically based on data from other sources</li> </ul> <p>With EJS, developers can create web pages that respond to real-time data while keeping code organized and easy to maintain.</p>"},{"location":"#intended-audience","title":"Intended Audience","text":"<p>This documentation is for developers who are building web applications using Node.js and Express, and want to use EJS (Embedded JavaScript) for rendering dynamic HTML pages. It is designed for individuals who:</p> <ul> <li>Can write JavaScript code, including using variables, functions, and loops.</li> <li>Know HTML and how to structure web pages using elements like headings, paragraphs, lists, and links.</li> <li>Have used Node.js, and know how to install and run packages using npm or yarn.</li> <li>Understand Express.js and can set up a simple server with route handling.</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>To follow these instructions, you will need:</p> <ul> <li>Knowledge of JavaScript (ES6) <ul> <li>Understanding of variables, functions, and basic syntax.</li> </ul> </li> <li>Familiarity with HTML <ul> <li>You should be able to structure web pages using common HTML tags.</li> </ul> </li> <li>Node.js installed <ul> <li>Download and install Node.js</li> </ul> </li> <li>A package manager <ul> <li>Either <code>npm</code> (comes with Node.js) or <code>yarn</code>.</li> </ul> </li> <li>A code editor <ul> <li>VS Code is recommended.</li> </ul> </li> <li>Basic knowledge of Express.js <ul> <li>Familiarity with setting up a simple server in Express will be helpful.</li> </ul> </li> </ul>"},{"location":"#what-you-will-learn","title":"What You Will Learn","text":"<p>This guide covers:</p> <ol> <li>Setting up EJS in a Node.js project</li> <li>Using EJS special syntax to inject dynamic content</li> <li>Integrating EJS with Express for rendering templates</li> <li>Using partials to create reusable components</li> </ol>"},{"location":"#typographical-conventions","title":"Typographical Conventions","text":"Convention Example Bold: Actions are indicated by bolded verbs Insert, Click, Enter Inline Code: Inline code is used to indicate filenames, commands, and short snippets <code>views/index.ejs</code>"},{"location":"#admonitions","title":"Admonitions","text":"<p>Info</p> <p>Provides additional helpful information.</p> <p>Warning</p> <p>Highlights potential issues to avoid.</p> <p>Tip</p> <p>Offers best practices or shortcuts to improve efficiency.</p>"},{"location":"ejs_tags/","title":"EJS Tags","text":""},{"location":"ejs_tags/#overview","title":"Overview","text":"<p>EJS uses special tags to dynamically render content in templates, and differentiate between regular HTML and JavaScript logic. This section will cover common EJS tags, and how to use them to output variables, escape HTML, add comments, and more. The following guide will walk you through how to use different EJS tags in a task manager.</p>"},{"location":"ejs_tags/#using-ejs-tags-in-a-task-manager-dashboard","title":"Using EJS Tags in a Task Manager Dashboard","text":"<p>Before you begin, you will need to set up your environment. For more detailed instructions on how to do this, see our guide on Integrating EJS with Express for Rendering Templates.</p>"},{"location":"ejs_tags/#1-set-up-your-environment","title":"1. Set Up Your Environment","text":"<p>Open your code editor and create or open your EJS file.</p> <p>Make sure Node.js and Express are installed.</p>"},{"location":"ejs_tags/#2-insert-a-scriptlet-tag","title":"2. Insert a Scriptlet Tag (<code>&lt;% %&gt;</code>)","text":"<p>The Scriptlet Tag is used to execute JavaScript code. These tags are used for control flow and do not output anything to the HTML.</p> <p>Insert a conditional check to display a welcome message if the user is logged in.</p> <pre><code>&lt;% if (user) { %&gt;\n    &lt;p&gt;Welcome to your Task Manager Dashboard.&lt;/p&gt;\n&lt;% } %&gt;\n</code></pre>"},{"location":"ejs_tags/#3-insert-an-escaped-output-tag","title":"3. Insert an Escaped Output Tag (<code>&lt;%= %&gt;</code>)","text":"<p>The Escaped Output Tag is used to output values to the HTML. This tag esapes HTML to prevent cross-site scripting (XSS) attacks.</p> <p>Insert an Escaped Output Tag to greet the user.</p> <pre><code>&lt;h1&gt;Welcome, &lt;%= user.name %&gt;!&lt;/h1&gt;\n</code></pre> <p>HTML Escaping</p> <p>HTML Escaping converts special characters like <code>&lt;</code>, <code>&gt;</code>, and <code>&amp;</code> into their HTML character entities (<code>&amp;lt;</code>, <code>&amp;gt;</code>, and <code>&amp;amp;</code>). HTML Escaping prevents hackers from injecting malicious code into your webpage.</p>"},{"location":"ejs_tags/#4-insert-an-unescaped-output-tag-","title":"4. Insert an Unescaped Output Tag (<code>&lt;%- %&gt;</code>)","text":"<p>The Unescaped Output Tag is similar to the Escaped Output Tag, except that it does not escape HTML. When using these tags, HTML content will be rendered as actual HTML elements.</p> <p>Insert an Unescaped Output Tag to include a task list partial. For further details on how to do this, see our guide on Using Partials with EJS.</p> <pre><code>&lt;%- include('partials/tasklist.ejs') %&gt;\n</code></pre> <p>Unescaped Output Tag</p> <p>Unescaped Output Tags allow raw HTML to be injected into your webpage. This can be dangerous, and should only be used when the content is coming from a trusted source. If a user is allowed to inject unescaped HTML, it could allow for XSS attacks.</p>"},{"location":"ejs_tags/#5-insert-a-comment-tag","title":"5. Insert a Comment Tag (<code>&lt;%# %&gt;</code>)","text":"<p>The Comment Tag is used to write comments in EJS files. Comments made using the comment tag will not be visible in the source code. These tags can be used to hide notes or explanations.</p> <p>Insert a comment tag to describe the code that is injected in your Unescaped Output Tag from step 4.</p> <pre><code>&lt;%# This section displays the user\u2019s pending tasks %&gt;\n</code></pre>"},{"location":"ejs_tags/#6-insert-literal-tags-and","title":"6. Insert Literal Tags (<code>&lt;%%</code> and <code>%%&gt;</code>)","text":"<p>The Literal Tag is used to output a raw EJS tag. These tags escape the EJS, and display <code>&lt;%</code> and <code>%&gt;</code> as plain text in the browser.</p> <p>Optional: If you would like to experiment with using Literal Tags, insert literal tags to show the EJS tags instead of executing them.</p> <pre><code>&lt;%%= \"This will display the surrounding EJS tags\" %%&gt;\n</code></pre>"},{"location":"ejs_tags/#html-output","title":"HTML Output","text":""},{"location":"ejs_tags/#conclusion","title":"Conclusion","text":"<p>You have completed the steps to use EJS tags in the context of a Task Manager Dashboard. You can now run JavaScript logic, output both escaped and raw HTML, include internal comments, and display literal code EJS tags. By following this guide and being aware of security concerns, you can use these tags to effectively create dynamic web pages.</p> <p>Download a sample solution for the task-manager here: task-manager.zip</p> <p>After downloading and extracting the files, navigate to the project folder and run <code>npm install</code> (or <code>yarn</code>) to install dependencies, then <code>npm start</code> to launch the application.</p>"},{"location":"ejs_tags/#summary-of-ejs-tags","title":"Summary of EJS Tags","text":"EJS Tag Usage <code>&lt;% %&gt;</code> Logic (conditional statements, loops) <code>&lt;%= %&gt;</code> Safe (escaped) content injection <code>&lt;%- %&gt;</code> Raw (unescaped) content injection <code>&lt;%# %&gt;</code> Comments <code>&lt;%%</code> and <code>%%&gt;</code> Displaying <code>&lt;%</code> and <code>%&gt;</code> as plain text"},{"location":"glossary/","title":"Glossary","text":"Term Definition EJS (Embedded JavaScript) A templating engine that allows dynamic rendering of HTML content using JavaScript within templates. Express A web application framework for Node.js, used to build server-side applications and APIs. Templating Engine A software tool that processes templates (HTML with embedded code) and generates dynamic HTML content based on provided data. View Engine The component in Express responsible for rendering templates and generating HTML pages to be sent to the client. Route A part of an Express application that handles specific HTTP requests (like GET or POST) and sends a response, often by rendering a template. Views Directory The folder where template files (like <code>.ejs</code>) are stored in an Express project. Dynamic Content Rendering The process of injecting data into an HTML template to create personalized or context-specific content for the user. Cross-Site Scripting (XSS) Attacks A vulnerability in a website is exploited by an attacker, allowing them to run malicious code. HTML Escaping Converting special reserved HTML characters into safe entities. Ternary Operator A JavaScript operator that takes three operands. A condition followed by <code>?</code>, an expression to run if the condition is true followed by <code>:</code>, and an expression to run if the condition is false."},{"location":"integration/","title":"Integrating EJS with Express for Rendering Templates","text":""},{"location":"integration/#overview","title":"Overview","text":"<p>EJS (Embedded JavaScript) is a templating engine that allows dynamic content rendering in Express applications. This documentation provides step-by-step instructions on setting up EJS and Express. It covers configuring Express, setting the view engine, and rendering templates from routes.</p>"},{"location":"integration/#installing-ejs-and-express","title":"Installing EJS and Express","text":""},{"location":"integration/#1-install-express-and-ejs-as-dependencies","title":"1. Install Express and EJS as dependencies:","text":"<p>Install Express:</p> <pre><code>npm install express\n</code></pre> <p>This will add Express to your <code>node_modules</code> folder and update your <code>package.json</code> file with Express as a dependency.</p> <p>Install EJS:</p> <pre><code>npm install ejs\n</code></pre> <p>This will install EJS as a templating engine for your Express app, enabling the dynamic rendering of HTML templates.</p> <p>Tip</p> <p>Don't forget to run <code>npm init --y</code> to initialize a new <code>package.json</code>, and run <code>npm install</code> to install dependencies in your Node.js project.</p>"},{"location":"integration/#2-verify-the-installations","title":"2. Verify the Installations:","text":"<p>After installation, you can see that both dependencies have been added to your package.json file. Your dependencies section should look like this:</p> <pre><code>\"dependencies\": {\n    \"express\": \"^4.17.1\",\n    \"ejs\": \"^3.1.6\"\n}\n</code></pre> <p>This ensures that both Express and EJS are correctly installed in your project.</p>"},{"location":"integration/#configuring-express-to-use-ejs","title":"Configuring Express to Use EJS","text":"<p>Before rendering templates, Express must be configured to recognize EJS as the templating engine.</p>"},{"location":"integration/#1-import-express","title":"1. Import Express:","text":"<p>Create your application file (e.g., <code>app.js</code>), and require the Express module in it.</p> <pre><code>const express = require('express');\n</code></pre>"},{"location":"integration/#2-initialize-the-express-app","title":"2. Initialize the Express App","text":"<p>Create an instance of an Express application.</p> <pre><code>const app = express();\n</code></pre>"},{"location":"integration/#3-set-ejs-as-the-view-engine","title":"3. Set EJS as the View Engine","text":"<p>First, create the <code>views</code> folder inside your directory</p> <pre><code>directory/\n    \u251c\u2500\u2500 views/\n    \u251c\u2500\u2500 node_modules/\n    \u251c\u2500\u2500 app.js\n    \u251c\u2500\u2500 package.json\n</code></pre> <p>Configure Express to use EJS for rendering templates. <pre><code>app.set('view engine', 'ejs');\n</code></pre></p> <p>Info</p> <p>The default directory for views is <code>./views</code>. If templates are in a different location, update path accordingly.</p>"},{"location":"integration/#rendering-an-ejs-template-from-an-express-route","title":"Rendering an EJS Template from an Express Route","text":"<p>Once EJS is configured, Express routes must be set up to render templates dynamically.</p>"},{"location":"integration/#1-create-an-express-route","title":"1. Create an Express Route","text":"<p>Define a route that will render an EJS template.</p> <pre><code>app.get('/', (req, res) =&gt; {\n    res.render('index', { name: 'John Doe'});\n});\n</code></pre> <p>When you pass data to the EJS template using <code>res.render()</code>, the data is sent as an object. In this case, we are passing one property: <code>name</code>. This property becomes available in the EJS template, where we can dynamically insert it into the HTML. Here, the <code>name</code> property can be used to personalize the message. </p> <p>This process allows you to inject dynamic, context-specific information into your views directly from your Express route handlers.</p>"},{"location":"integration/#2-create-the-template-file","title":"2. Create the Template File","text":"<p>Inside the <code>views</code> directory, create <code>index.ejs</code>.</p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome back, &lt;%= name %&gt;!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This will render the \"Welcome back, John Doe!\" message.</p>"},{"location":"integration/#3-start-the-express-server","title":"3. Start the Express Server","text":"<p>Run the server to test the template rendering.</p> <pre><code>app.listen(3000, () =&gt; {\n    console.log('Server is running on http://localhost:3000');\n});\n</code></pre> <p>In your console, run the command:</p> <pre><code>node app.js\n</code></pre>"},{"location":"integration/#4-verify-in-browser","title":"4. Verify in Browser","text":"<p>Open <code>http://localhost:3000</code> in a browser to check if the template renders correctly.</p> <p></p>"},{"location":"integration/#conclusion","title":"Conclusion","text":"<p>With this configuration, Express successfully renders EJS templates from routes, allowing dynamic page content to be served.</p>"},{"location":"loops_and_conditionals/","title":"Using EJS Loops and Conditionals","text":""},{"location":"loops_and_conditionals/#overview","title":"Overview","text":"<p>This guide demonstrates how to use loops and conditional statements in your EJS templates in the context of a Task Manager Dashboard. EJS allows you to use JavaScript logic to display dynamic content. This section will cover common control structures that you may want to use when embedding JavaScript logic into HTML. In the following steps, you will see how to control the display of tasks based on their properties and iterate over a list of tasks</p>"},{"location":"loops_and_conditionals/#conditionals","title":"Conditionals","text":"<p>We use <code>&lt;% %&gt;</code> tags to embed JavaScript logic into HTML without outputting content.</p> <p>EJS Tags</p> <p>Using incorrect EJS tags will result in unexpected behaviour or errors. Please refer to this guide's EJS Tags section for details on the different EJS tags.</p>"},{"location":"loops_and_conditionals/#1-set-up-your-environment","title":"1. Set Up Your Environment","text":"<p>Open your code editor and create or open your EJS file. We recommend first completing the guide on EJS Tags</p> <p>Make sure Node.js and Express are installed.</p>"},{"location":"loops_and_conditionals/#2-basic-if-statement","title":"2. Basic <code>if</code> Statement","text":"<p>You can use a basic <code>if</code> statement to display content if a certain condition is met. </p> <p>Insert a basic <code>if</code> statement to check if any tasks exist.</p> <pre><code>&lt;% if (tasks.length &gt; 0) { %&gt;\n    &lt;p&gt;You have tasks to complete today.&lt;/p&gt;\n&lt;% } %&gt;\n</code></pre>"},{"location":"loops_and_conditionals/#3-if-else-statement","title":"3. <code>if-else</code> Statement","text":"<p><code>if-else</code> statements can be used to display different content when a condition is true or false.</p> <p>Insert an <code>if-else</code> statement to display if a task is completed or pending.</p> <pre><code>&lt;% tasks.forEach(task =&gt; { %&gt;\n    &lt;% if (task.completed) { %&gt;\n        &lt;p&gt;&lt;%= task.title %&gt; is completed.&lt;/p&gt;\n    &lt;% } else { %&gt;\n        &lt;p&gt;&lt;%= task.title %&gt; is pending.&lt;/p&gt;\n    &lt;% } %&gt;\n&lt;% }); %&gt;\n</code></pre>"},{"location":"loops_and_conditionals/#4-else-if-chain","title":"4. <code>else-if</code> Chain","text":"<p>A chain of <code>else-if</code> statements can be used to inject different HTML depending on the value of a variable.</p> <p>Insert an <code>else-if</code> chain to check the priority of tasks.</p> <pre><code>&lt;% tasks.forEach(task =&gt; { %&gt;\n    &lt;% if (task.priority === 'high') { %&gt;\n        &lt;p&gt;&lt;%= task.title %&gt; is high priority!&lt;/p&gt;\n    &lt;% } else if (task.priority === 'medium') { %&gt;\n        &lt;p&gt;&lt;%= task.title %&gt; has medium priority.&lt;/p&gt;\n    &lt;% } else { %&gt;\n        &lt;p&gt;&lt;%= task.title %&gt; is low priority.&lt;/p&gt;\n    &lt;% } %&gt;\n&lt;% }); %&gt;\n</code></pre>"},{"location":"loops_and_conditionals/#5-shorthand-conditional-statement","title":"5. Shorthand Conditional Statement","text":"<p>Shorthand conditional statements are convenient for simple logic inside of <code>&lt;%= %&gt;</code> tags.</p> <p>Insert a shortand conditional statement to display the status for the first task.</p> <pre><code>&lt;p&gt;Task \"&lt;%= tasks[0].title %&gt;\" is &lt;%= tasks[0].completed ? 'Done' : 'Not Done' %&gt;.&lt;/p&gt;\n</code></pre>"},{"location":"loops_and_conditionals/#loops","title":"Loops","text":"<p>Loops can be used to iterate over arrays or objects to dynamically inject repetitive HTML content.</p>"},{"location":"loops_and_conditionals/#1-for-loop","title":"1. <code>for</code> Loop","text":"<p>A simple <code>for</code> loop can be used to populate HTML with repetitive content.</p> <p>Insert a <code>for</code> loop to list all of the tasks.</p> <pre><code>&lt;% for (let i = 0; i &lt; tasks.length; i++) { %&gt;\n    &lt;h3&gt;Task &lt;%= i + 1 %&gt;: &lt;%= tasks[i].title %&gt;&lt;/h3&gt;\n&lt;% } %&gt;\n</code></pre>"},{"location":"loops_and_conditionals/#2-foreach-loop","title":"2. <code>forEach</code> Loop","text":"<p>You can loop through arrays using a <code>forEach</code> loop.</p> <p>Insert a <code>forEach</code> loop to display each task.</p> <pre><code>&lt;% tasks.forEach(task =&gt; { %&gt;\n    &lt;p&gt;Task: &lt;%= task.title %&gt;&lt;/p&gt;\n&lt;% }); %&gt;\n</code></pre>"},{"location":"loops_and_conditionals/#3-forin-loop","title":"3. <code>for</code>...<code>in</code> Loop","text":"<p>To loop through key-value pairs of an object, we can use a <code>for</code>...<code>in</code> loop.</p> <p>Insert a <code>for</code>...<code>in</code> loop to show the details of the first task.</p> <pre><code>&lt;% let task = tasks[0]; %&gt;\n&lt;ul&gt;\n    &lt;% for (let key in task) { %&gt;\n        &lt;li&gt;&lt;%= key %&gt;: &lt;%= task[key] %&gt;&lt;/li&gt;\n    &lt;% } %&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"loops_and_conditionals/#sample-task-manager-website","title":"Sample Task Manager Website","text":""},{"location":"loops_and_conditionals/#conclusion","title":"Conclusion","text":"<p>By following these instructions, you have learned how to use conditional statements and loops in your EJS templates. You can now use the techniques described in this section to dynamically display content.</p> <p>Download a sample solution for the task-manager here: task-manager.zip. </p> <p>After downloading and extracting the files, navigate to the project folder and run <code>npm install</code> (or <code>yarn</code>) to install dependencies, then <code>npm start</code> to launch the application.</p>"},{"location":"partials/","title":"Using Paritals with EJS","text":""},{"location":"partials/#overview","title":"Overview","text":"<p>Partials in EJS let you reuse HTML snippets across multiple views, reducing repetition and keeping the codebase tidy and easier to manage.</p> <p>This documentation explains how to integrate partials into your EJS templates.</p>"},{"location":"partials/#what-are-partials","title":"What are Partials?","text":"<p>Partials are small chunks of HTML that can be reused across multiple EJS templates. Common examples of partials include headers, footers, navigation bars, and sidebars. Instead of writing the same HTML code in every template, you can create partials and include them in other views, making your templates easier to maintain.</p>"},{"location":"partials/#creating-partials-in-ejs","title":"Creating Partials in EJS","text":""},{"location":"partials/#1-create-a-partials-folder","title":"1. Create a Partials Folder","text":"<p>To organize partials, it's good practice to create a <code>partials</code> folder within your <code>views</code> directory.</p> <pre><code>views/\n  \u251c\u2500\u2500 partials/\n  \u2502    \u251c\u2500\u2500 header.ejs\n  \u2502    \u251c\u2500\u2500 footer.ejs\n  \u2502    \u2514\u2500\u2500 nav.ejs\n  \u2514\u2500\u2500 index.ejs\n</code></pre>"},{"location":"partials/#2-create-partial-files","title":"2. Create Partial Files","text":"<p>Create your partial files (e.g., <code>header.ejs</code>, <code>footer.ejs</code>, <code>nav.ejs</code>) inside the <code>partials</code> folder.</p> <p>Example: header.ejs <pre><code>&lt;header&gt;\n  &lt;h1&gt;My Awesome Website&lt;/h1&gt;\n  &lt;p&gt;Your go-to place for amazing content&lt;/p&gt;\n&lt;/header&gt;\n</code></pre></p> <p>Example: footer.ejs <pre><code>&lt;footer&gt;\n  &lt;p&gt;&amp;copy; 2025 My Awesome Website&lt;/p&gt;\n&lt;/footer&gt;\n</code></pre></p> <p>Example: nav.ejs <pre><code>&lt;nav&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/about\"&gt;About&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/services\"&gt;Services&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre></p>"},{"location":"partials/#3-include-partials-in-your-main-template","title":"3. Include Partials in Your Main Template","text":"<p>To use a partial in your main template (e.g., <code>index.ejs</code>), use the <code>&lt;%- include %&gt;</code> syntax. This tells EJS to include the contents of another EJS file at that point in the template.</p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n  &lt;!-- Include Header Partial --&gt;\n  &lt;%- include('partials/header') %&gt;\n\n  &lt;h2&gt;Welcome to the Home Page!&lt;/h2&gt;\n  &lt;p&gt;Here is some dynamic content.&lt;/p&gt;\n\n  &lt;!-- Include Navigation Partial --&gt;\n  &lt;%- include('partials/nav') %&gt;\n\n  &lt;p&gt;More content goes here...&lt;/p&gt;\n\n  &lt;!-- Include Footer Partial --&gt;\n  &lt;%- include('partials/footer') %&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Info</p> <p>In this example, the <code>header</code>, <code>nav</code>, and <code>footer</code> partials are included at their respective positions within the <code>index.ejs</code> file.</p>"},{"location":"partials/#4-verify-in-browser","title":"4. Verify in Browser","text":"<p>Open <code>http://localhost:3000</code> in a browser to verify that the partials are correctly rendered within the main template.</p> <p></p>"},{"location":"partials/#passing-data-to-partials","title":"Passing Data to Partials","text":"<p>You can pass data to partials by providing variables in the <code>render</code> method. However, note that data passed to the main template is not automatically available to partials. If you need to pass data to a partial, you can do it by including the data as a parameter within the <code>include</code> statement.</p>"},{"location":"partials/#1-update-headerejs-to-accept-a-dynamic-title","title":"1. Update header.ejs to accept a dynamic title","text":"<pre><code>&lt;header&gt;\n  &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;\n  &lt;p&gt;Your go-to place for amazing content&lt;/p&gt;\n&lt;/header&gt;\n</code></pre>"},{"location":"partials/#2-update-indexejs-to-pass-data-to-the-partials","title":"2. Update index.ejs to pass data to the partials","text":"<pre><code>&lt;html&gt;\n&lt;body&gt;\n  &lt;!-- Include Header Partial with dynamic title --&gt;\n  &lt;%- include('partials/header', { title: 'Home Page' }) %&gt;\n\n  &lt;h2&gt;Welcome to the Home Page!&lt;/h2&gt;\n  &lt;p&gt;Here is some dynamic content.&lt;/p&gt;\n\n  &lt;%- include('partials/nav') %&gt;\n  &lt;p&gt;More content goes here...&lt;/p&gt;\n\n  &lt;%- include('partials/footer') %&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Now, the header partial will display a dynamic title passed from the index.ejs template.</p> <p></p>"},{"location":"partials/#conclusion","title":"Conclusion","text":"<p>EJS partials break your templates into reusable pieces, eliminating redundant code across views. Put common elements like headers and navigation in partials to streamline updates and maintenance. You can include these components with minimal code while passing them any necessary data, keeping your templates clean and focused.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"Symptom Possible Cause Solution Partials not rendering in the template Incorrect path to partial files Check that the path in <code>include()</code> matches your directory structure (e.g. <code>&lt;%- include('partials/header') %&gt;</code>) \"Error: Cannot find module 'ejs'\" when starting server EJS package not installed Run <code>npm install ejs</code> in your project directory Data not appearing in partials Data not being passed to the partial Pass data explicitly to partials: <code>&lt;%- include('partials/header', { title: 'Home Page' }) %&gt;</code> Syntax errors in EJS templates Incorrect EJS tag syntax Ensure proper syntax: <code>&lt;%= variable %&gt;</code> for escaped output, <code>&lt;%- include() %&gt;</code> for unescaped output/includes Can't see changes to partials when refreshing browser Server caching views Restart the server or implement a development tool like nodemon Template rendering plain text HTML tags Using <code>&lt;%= %&gt;</code> instead of <code>&lt;%- %&gt;</code> for HTML content Use <code>&lt;%- htmlContent %&gt;</code> for unescaped HTML rendering Express not recognizing .ejs files View engine not set to EJS Add <code>app.set('view engine', 'ejs')</code> to your Express configuration \"ENOENT: no such file or directory\" error Missing partial file or incorrect file path Verify the partial file exists and the path is correct relative to the views directory Unable to pass variables to templates Variables not defined in the route handler Ensure all needed variables are included in the object passed to <code>res.render()</code> \"TypeError: Cannot read properties of undefined (reading 'name')\" Not passing the user object when rendering the EJS page Pass the user in an object when rendering your EJS page. If the user might not be defined, use a conditional statement (e.g. <code>&lt;% if(user) { %&gt; &lt;h1&gt;Welcome, &lt;%= user.name %&gt;!&lt;/h1&gt; &lt;% } %&gt;</code>) Injected variables not rendering in the template Using <code>&lt;% %&gt;</code> instead of <code>&lt;%= %&gt;</code> Using <code>&lt;% %&gt;</code> will not render output. Ensure you are using escaped output tags"}]}